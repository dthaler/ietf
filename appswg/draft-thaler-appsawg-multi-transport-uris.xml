<?xml version="1.0"?>
<!-- This line is a comment that won't appear in the generated document. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"[
      <!-- For each RFC you want to reference, add a line like below and then
           see the references section at the end.  This line tells the
           tool to pull the reference from the database. -->
      <!ENTITY rfc2782 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2782.xml">
      <!ENTITY rfc3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
      <!ENTITY rfc5630 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5630.xml">
      <!ENTITY rfc6335 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6335.xml">
      <!ENTITY rfc6555 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6555.xml">
      <!ENTITY rfc6724 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6724.xml">
      <!ENTITY rfc6943 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6943.xml">
      <!-- ENTITY rfc7252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml" -->
      <!ENTITY rfc7320 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7320.xml">
      <!ENTITY rfc7595 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7595.xml">
      <!ENTITY rfc7838 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7838.xml">
      <!-- For each Internet Draft you want to reference, add a line like
           below and then see the references section at the end. -->
      <!-- ENTITY I-D.ietf-core-coap-tcp-tls PUBLIC ''
          'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-coap-tcp-tls.xml' -->
      ]>
<?rfc toc='yes' ?>
<?rfc symrefs='yes' ?>
<?rfc sortrefs='no'?>
<?rfc compact='yes'?>
<!-- <?rfc-ext parse-xml-in-artwork='yes' ?> -->
<!-- <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?> -->

<rfc docName="draft-thaler-appsawg-multi-transport-uris-01" ipr="trust200902" category="info">
  <front>
    <title abbrev='Multi-Transport URIs'>Using URIs With Multiple Transport Stacks</title>
    <author initials='D.' surname='Thaler' fullname='Dave Thaler'>
      <organization>Microsoft</organization>
      <address>
        <postal>
          <street>One Microsoft Way</street>
          <city>Redmond</city>
          <region>WA</region>
          <code>98052</code>
          <country>USA</country>
        </postal>
        <email>dthaler@microsoft.com</email>
      </address>
    </author>
    <date year='2017' />
    <area>ART</area>
    <!-- <keyword>unlinkability</keyword>
         <keyword>anonymity</keyword>
         <keyword>IPv6</keyword>
         <keyword>Secure Neighbor Discovery</keyword>
      -->
    <abstract>
      <t> Many Uniform Resource Identifiers (URIs) today have some mechanism to resolve
          them to one or more specific endpoints where that resource is available.
          This document discusses issues that arise when the same resource can be reached 
          over multiple protocol stacks, and discusses various approaches that have been 
          used or discussed, and the tradeoffs between them. Such issues are important to consider
          when defining new URI schemes and resolution mechanisms.
      </t>
    </abstract>
  </front>
 
  <middle>
    <section title='Introduction' anchor='intro'>
        <t> For Uniform Resource Identifier (URI) schemes that function as locators,
            <xref target="RFC3986"/> explains that URI "resolution" is the process of
            determining an access mechanism and the appropriate parameters necessary to
            deference a URI; this resolution may require several iterations.  To use that
            access mechanism to perform an action on the URI's resource is to "dereference"
            the URI.
        </t>
        <t> The specific details vary by URI scheme and hence are up to each
            URI scheme definition to specify.
            Requirements for URI scheme definitions are covered in <xref target="RFC3986"/>,
            <xref target="RFC7320"/>, and <xref target="RFC7595"/>.  RFC 7595 section 3.3
            states:
            <list style="empty">
                <t> For schemes that function as locators, it is important that the
                    mechanism of resource location be clearly defined.
                </t>
            </list>
        </t>
        <t> Closely related to the concept of resolving a URI to a resource that may have
            multiple ways to reach it, is the concept of "equivalence".
            <xref target="RFC3986"/> section 6.1 states:
            <list style="empty">
                <t> Even though it is possible to determine that two URIs are equivalent,
                    URI comparison is not sufficient to determine whether two URIs
                    identify different resources.  For example, an owner of two different
                    domain names could decide to serve the same resource from both,
                    resulting in two different URIs.  Therefore, comparison methods are
                    designed to minimize false negatives while strictly avoiding false
                    positives.
                </t>
            </list>
            Thus, it is possible that two distinct URIs refer to the same resource.
            The goal, as RFC 3986 stated above, is simply to "minimize" such cases, but such
            minimization often comes at a cost.  For example, for many URIs schemes, a DNS name can be
            used in the authority component rather than using several URIs that differ only in
            IP address literal, with the cost being a dependency on DNS name resolution and
            the potential latency and traffic involved.  
        </t>
        <t> As another example, <xref target="RFC5630"/> section 4.1 states:
            <list style="empty">
                <t> SIP and SIPS URIs that are identical except for the scheme itself
                    (e.g., sip:alice@example.com and sips:alice@example.com) refer to the
                    same resource.  This requirement is implicit in [RFC3261], Section
                    19.1, which states that "any resource described by a SIP URI can be
                    'upgraded' to a SIPS URI by just changing the scheme, if it is
                    desired to communicate with that resource securely".  This does not
                    mean that the SIPS URI will necessarily be reachable, in particular,
                    if the proxy cannot establish a secure connection to a client or
                    another proxy.  This does not suggest either that proxies would
                    arbitrarily "upgrade" SIP URIs to SIPS URIs when forwarding a request
                    (see Section 5.3).  Rather, it means that when a resource is
                    addressable with SIP, it will also be addressable with SIPS.
                </t>
            </list>
            Thus, the same resource might be identified by multiple URIs that differ only in
            URI scheme, or authority component, or path (e.g., using ".." resolution).
        </t>
        <t> For URIs used in the World Wide Web, Section 2.3.1 of "Architecture of the World 
            Wide Web" <xref target="AWWW" /> further discusses such aliasing, explaining
            that links to a resource increase the value of that resource, and multiple URIs
            for it interfere with such valuation, and also makes
            it difficult to correlate two sources as pointing to the same resource
            via differing aliases.  Thus to maximize the benefit to the Web, URI aliases
            should be minimized.
        </t>
        <!--
            <t> The focus of this draft is on handling of different transport endpoints for the same
                resource, whether that is done using a single URI or multiple URIs with the
                same URI scheme or multiple URIs with different URI schemes.
            </t>
        -->
    </section>

    <section title='Problem Statement' anchor='problem'>
        <t> Besides specifying one or more URI scheme names to be used and the syntax for each (e.g.,
            what the authority component contains), there are two issues a URI scheme definer must 
            deal with when multiple transports are available for accessing a given resource:
            <list style="numbers">
                <t> Specifying how the set of transport endpoint identifiers (e.g., TCP and UDP port
                    numbers) for a given URI can be discovered by an entity wishing to resolve it, and
                </t>
                <t> Specifying how an appropriate transport endpoint can be selected for use,
                    from among the discovered set.
                </t>
            </list>
            At a high level, these issues are equivalent to those arising when multiple IP addresses
            are available for the same resource.  However, in general, there may be multiple
            layers in a transport stack, each with their own identifiers, so the problems are compounded
            when multiple choices exist at each of multiple layers below the application-layer protocol itself.
        </t>
    </section>

    <!-- section title='Possible Approaches' anchor='approaches' -->

        <section title="Transport endpoint discovery">
            <t> A client wishing to access a resource needs to know, for each layer in the transport stack,
                what protocol(s) to use, and what identifier(s) are needed by each such protocol.
                There are several possible approaches to transport endpoint identifier discovery,
                which we cover in the following sections.  For simplicity, we will discuss them
                as if the same approach is used for both types of information, but it is important to
                remember that a URI scheme could specify discovery of the set of transport protocols via one approach, 
                and discovery of the identifier(s) for each transport protocol via another approach.  
            </t>

            <section title='Specified by the URI scheme specification'>
            <t> In this approach, every resource is assumed to use the exact same set of transport
                protocols (i.e., stacks of protocols above the network layer) and identifiers.  The 
                identifiers can be IANA assigned and specified as part of the URI scheme or protocol
                specification.  For example, TFTP only supports UDP port 69, and so
                no port number is permitted in a tftp URI.
            </t>
            <t> If support for a new transport protocol is later added under a protocol with a given URI scheme,
                different entities may thus have different hard-coded assumptions about the set of 
                possible transport protocols, which just pushes the rest of the burden to the problem
                of selection among the known set (see <xref target="selection"/>).
            </t>
            <t> A disadvantage of this approach for many use cases is that it does not allow for 
                non-default configurations such as custom ports.
            </t>
            </section>

            <section title='Passed in one URI' anchor='allin'>
                <t> For single-transport protocols, a common mechanism is to specify a default port
                    for the URI scheme, and to allow putting a non-default port number in the URI
                    authority component.
                </t>
                <t> For multi-transport protocols, historically it was sometimes assumed that multiple 
                    transport protocols (e.g., UDP and TCP) would use the same port number, so specifying 
                    a single number would also be sufficient for multiple transports.  When port numbers 
                    appear in URIs, they are not the default ports that might be IANA-assigned
                    (since default ports should be omitted from the URI per <xref target="RFC3986"/>
                    section 3.2.3), but instead are either statically chosen by the server application,
                    or are ephemeral ports dynamically allocated on the server hosting the resource.  In
                    most TCP/IP stacks, ephemeral ports used by UDP endpoints have no relationship to ephemeral
                    ports used by TCP endpoints in the same application and so it cannot be guaranteed
                    that the port numbers are the same.  For example, port 51000 might be allocated
                    to one application for UDP, and a different application for TCP.
                </t>
                <t> Since 2011, this same issue can also occur with IANA-assigned ports,
                    <!--
                    if IANA assigns
                    port numbers to different applications that share a common URI scheme, since such applications
                    cannot use the default port for that URI scheme.
                    -->
                    especially if support for a given transport protocol is added at a later time.
                    <xref target="RFC6335"/> section 7.2 explains:
                    <list style="empty">
                        <t> Effective with the publication of this document, IANA will begin
                            assigning port numbers for only those transport protocols explicitly
                            included in an assignment request.  This ends the long-standing
                            practice of automatically assigning a port number to an application
                            for both TCP and UDP, even if the request is for only one of these
                            transport protocols.
                        </t>
                    </list>
                </t>
                <t> Thus, for most URI schemes, a port number appearing in a URI authority component
                    must be specified as being in a specific transport-layer protocol's numbering space 
                    since its value for a given resource might differ by transport protocol.
                    If a URI scheme wishes for the port number in URI authority component to be able to
                    apply to multiple transport protocols, the URI scheme would typically have to assume 
                    static configuration on servers; this may be acceptable in some circumstances and
                    unacceptable in others.
                </t>
                <t> A common solution in non-URI contexts is to use a service name rather than
                    a literal port number, and allow the service name to be resolved to the relevant
                    transport-layer identifier.  Indeed, <xref target="RFC6335"/> section 3 says:
                    <list style="empty">
                        <t> Because the port number space is finite
                            (and therefore conservation is an important goal), the alternative of
                            using service names instead of port numbers is RECOMMENDED whenever
                            possible.
                        </t>
                    </list>
                    Unfortunately, it is not possible to follow this recommendation with the port field
                    in URI authority component, since the URI syntax only allows integers in the port field.
                </t>
                <t> For new URI schemes, it may be possible in some cases to place a service name in the
                    host field, such as "_myservice._tcp.example.org" as would be used with a DNS SRV record
                    <xref target="RFC2782" />.
                    That example still specifies only a single transport protocol stack ("_tcp") however,
                    rather than a list of supported stacks.
                </t>
                <t> Another limitation of service names is that they are currently limited only to
                    TCP, UDP, SCTP, and DCCP, and so cannot be used with other layers (e.g., websockets)
                    or protocols.  Thus, a URI scheme for a protocol that supports both, say, websockets and raw TCP
                    as possible transports for resource access, cannot use a service name as a common identifier
                    for transport-layer endpoint resolution.
                </t>
                <t> It is usually also undesirable to put transport-layer endpoint information (the
                    list of supported transport protocols or the identifier(s) used with the transport protocols)
                    in the path or query components for two reasons.  First, those components are typically 
                    passed over the wire 
                    to the server when accessing a resource, which only consumes extra bandwidth with no benefit.
                    Second, if the transport-layer identifiers might change over the lifetime of the resource,
                    then the URI would need to change even if the change did not affect the actual endpoint
                    chosen by the client.  Such a change would negatively affect equivalence with
                    the previous URI, e.g., resulting in cache misses.
                </t>
                <t> Thus, an advantage of this approach is that it can work without any dependency on
                    other protocols or deployment of servers needed for resolution, and a disadvantage is
                    that putting information about multiple transport-layer endpoints anywhere in the same URI
                    could make for a very long URI that might have issues with certain software, or have bandwidth
                    or storage issues.
                </t>
            </section>
    
            <section title='Use separate URI for each transport endpoint'>
                <t> In this approach, one must simply accept the fact that multiple URIs 
                    might refer to the same resource as RFC 3986 already allows. This is similar
                    to using a set of URIs that differ only in IP address literal, for a case when
                    the resource server is not resolvable via a protocol such as DNS or SIP.
                </t>
                <t> The obvious disadvantage is that there are multiple URIs for the same resource.
                    Another potential disadvantage for some more complex use cases where there are
                    multiple layers of the transport stack, is that it may be difficult or impossible to
                    express all the identifiers in an entire stack of protocols in one URI.
                </t>
                <t> For cases where there are multiple transport protocols but only one such layer,
                    this approach results in needing to identify a single transport protocol per URI.
                    As discussed in <xref target="allin"/>, this often cannot be put in the
                    authority component and is undesirable to put in the path or query component.  As a result,
                    such cases involve specifying a separate URI scheme per transport.  For example,
                    "sip" and "sips" do this.  The CoRE WG also proposed this approach for CoAP
                    with "coap", "coaps", "coap+tcp", "coaps+tcp", etc.
                </t>
            </section>

            <section title='Use another mechanism for discovery'>
            <t> In this approach, a URI scheme definer would specify a mechanism whereby transport stack
                identifiers can be resolved for a given URI.  If multiple layers exist, then such
                resolution might involve a resolution step for each layer.
            </t>
            <t> DNS records (e.g., SRV records) provide one potential mechanism that can be used to discover
                a set of supported transports and their associated identifiers.  Other types of
                directories might be usable in other cases. For example, HTTP now provides an "Alt-Svc"
                <xref target="RFC7838" /> mechanism that can discover alternate transport endpoints for the
                same HTTP URI.
            </t>
            <t> One challenge in many cases is defining a common mechanism that could discover identifiers for 
                different transport protocols.  For example, websockets use URIs and TCP uses port
                numbers (and there is currently no URI scheme for TCP itself), and so the syntax
                of such identifiers may differ if an application layer protocol could use both TCP
                and websockets.
            </t>
            <t> The advantage of requiring a separate resolution mechanism is that the resource URI itself
                can be kept short and simple.  The downside is extra complexity in both clients 
                and servers, and potentially extra specification work for the URI scheme definer, and
                the possible additional deployment burden of provisioning and operating extra protocols 
                or servers to facilitate such resolution.
            </t>
            <t> In some contexts, it might also be feasible to discover the additional identifiers using the
                same mechanism used to discover the URI itself, perhaps even in the same message.
            </t>
            <!--
                If TCP and UDP are used, this also requires
                a way to discover TCP or UDP endpoint information either by defining generic URI schemes for
                TCP and UDP or by making the discovery mechanism be capable of discovering transport identifiers
                using a syntax other than URIs (e.g., SRV records).
                Discovery syntax might be URIs or something else.  Often something else since 
                TCP and UDP don't have URIs, but things like websockets do.
            -->
            </section>

            <!-- Hypothetical "Hybrid" approach (omit for now):
                <t> Specify that the port number, if any, in a URI scheme, is specifically a port number used
                    with a single specific transport protocol stack.  Identifiers for use with any other transport
                    stack must be resolved using a specific mechanism (e.g., SRV record lookups) as specified
                    by the URI scheme.  
                </t>
             -->
        </section>

        <section title="Transport endpoint selection" anchor="selection">
            <t> The URI scheme must specify the mechanism for choosing
                among transport protocol stacks, such as specifying at least one that is mandatory to implement
                and an algorithm for trying possible transport stacks in some order until one works.
            </t>
            <t> This problem is similar to that of choosing among multiple discovered IP addresses for
                the same transport stack, and two common solutions are used today in that context.
                One category of algorithm is to sort the choices according to some criteria, and then
                to try them in order of preference.  For example, SRV records provide a priority and weight
                for each transport endpoint that can be used to sort them, and
                <xref target="RFC6724"/> provides an algorithm for sorting destination IP addresses.
            </t>
            <t> Another category of such algorithms is called "Happy Eyeballs" <xref target="RFC6555"/>
                where multiple possibilities are attempted in parallel (possibly with some delay added
                before starting non-preferred choices) and keeping the first one that successfully connects.
                The advantage is faster connection when a non-preferred choice is needed, and the disadvantages
                are extra complexity in the client, extra traffic on the network, and extra connections
                at the server if multiple parallel attempts succeed.
            </t>
            <t> As noted earlier, when multiple layers exist in the transport stack, the number of possible
                permutations might be large in some cases, and so a mechanism must be cognizant of that.
            </t>
        </section>

    <!-- /section -->

    <section title='IANA Considerations'>
        <t> This document has no actions for IANA.
        </t>
    </section>

    <section title='Security Considerations'>
      <t> The security considerations in section 3.7 of <xref target="RFC7595"/> and
          section 7 of <xref target="RFC3986"/> apply.  <xref target="RFC6943"/> also
          discusses security considerations with determining equivalence, and section
          3.1.4 of that document is relevant to resolution.  This document does not 
          raise additional security issues.
      </t>
    </section>

    <section title='Acknowledgements'>
      <t> Thanks to Graham Klyne, Alexey Melnikov, and Gabriel Montenegro for helpful suggestions
          on this document.
      </t>
    </section>

  </middle>

  <back>

    <references title='Informative References'>
      &rfc2782;
      &rfc3986;
      &rfc5630;
      &rfc6335;
      &rfc6555;
      &rfc6724;
      &rfc6943;
      <!-- &rfc7252; -->
      &rfc7320;
      &rfc7595;
      &rfc7838;
      <!-- &I-D.ietf-core-coap-tcp-tls; -->

      <reference anchor='AWWW' target='http://www.w3.org/TR/webarch'>
        <front>
          <title>Architecture of the World Wide Web, Volume One</title>
          <author initials='I.' surname='Jacobs' fullname='Ian Jacobs'/>
          <author initials='N.' surname='Walsh' fullname='Norman Walsh'/>
          <date year="2004" month="December" day="15"/>
        </front>
        <!-- seriesInfo name="Symposium on Security and Privacy" value="2003"/ -->
      </reference>

    </references>
  </back>
</rfc>
